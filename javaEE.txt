
Ch2: Servlets
	- A servlet is a web component hosted in a servlet container and generates dynamic content. The web clients interact with a servlet using 
		a request/response pattern. The servlet container is responsible for the life cycle of the servlet, receives requests and sends responses.
		
		@WebServlet("/account")
		public class AccountServlet extends javax.servlet.http.HttpServlet { }
	- The HttpServlet interface has one doXXX method to handle each of HTTP GET, POST, PUT, DELETE, HEAD, OPTIONS, and TRACE requests.
	- Request parameters may be passed in GET and POST requests. In a GET request, these parameters are passed in the query string as name/value pairs.
		protected void doGet(HttpServletRequest request, HttpServletResponse response) { String txValue = request.getParameter("tx"); }
		
	- In the past, servlets were defined in web.xml (servlet name & mapping). Now this can be done using annotations (@Servlet, etc).
	- A servlet is packaged in a web application in a .war file. Multiple servlets may be packaged together, and they all share a servlet context. 
		The ServletContext provides detail about the execution environment of the servlets and is used to communicate with the container.
		protected void doGet(HttpServletRequest request, HttpServletResponse response) { ServletContext context = request.getServletContext(); }
	- Storing data in a user session: HttpSession session = request.getSession(true);
	- Setting cookies: SessionCookieConfig config = request.getServletContext().getSessionCookieConfig(); config.setHttpOnly(true);
	- Servlets from the same context can forward requests between them.
	- In addition to declaring servlets using @WebServlet and web.xml, you can define them programmatically using ServletContext.addServlet methods. 
		You can do this from the ServletContainerInitializer.onStartup or ServletContextListener.contextInitialized method.
	- Servlet Filters: A servlet filter may be used to update the request and response payload and header information from and to the servlet
		@WebFilter("/*")
		public class LoggingFilter implements javax.servlet.Filter { public void doFilter(HttpServletRequest request, HttpServletResponse response) { } }
	- Event Listeners: Event listeners provide life-cycle callback events for ServletContext, HttpSession, and ServletRequest objects.
		Each class is annotated with @WebListener, declared in web.xml, or registered via one of the ServletCon text.addListener methods.
	- Resource Packaging: You can access resources bundled in the .war file using the ServletContext.getResource and .getResourceAsStream methods.
	- Error Mapping: inside the web.xml, you can specify an error page for any HTTP error, like error-404.jsp.