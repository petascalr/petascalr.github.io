Interviews:

Design patterns
	Creational
		Singleton
		Factory Pattern
			examples:
				Collections.
				Executors.
				
		Abstract Factory: factory of factories
		Builder
		Prototype
	
	Structural
		Adapter
		Composite
		Marker Interface
		Proxy
		
	Behavioral
		Interpreter
		Visitor
		
		
SOLID
	SRP
	Open-closed principle: Objects should be open for extension, but closed for modif.(Base interfaces with different implementations - modify immplementation)
	Liskov substitution principle. A base class can be substituted for a derived class basically.
	Interface segregation principle: a client should never be forced to implement an useless interface (we must have separate interfaces for each purpose)
	Dependency-Inversion Principle
	
BASE properties (for NoSQL databases)
	- Basically Available
	- Soft state
	- Eventual Consistency: a system will become consistent over time, given that the system does not receive input during that time.
	
CAP theorem: A distributed computer is not possible to have all next 3 properties:
	- Consistency: all nodes share the same data with concurrent updates.
	- Availability: every request receives a response if it was OK or FAIL.
	- Partition tolerance: the system continues to operate despite arbitrary message loss or failure of part of the system.
	- Only 2 of these 3 muyst be satisfied at the same time, even by Google/Fb/Amazon.
	
Twelve-Factor App: set of best practices for building SaaS applications.

Heuristic Exception:
	- refers to a transaction participantâ€™s decision to unilaterally take some action without the consensus of the transaction manager, 
	usually as a result of some kind of catastrophic failure between the participant and the transaction manager.
	- It is the worst error that may happen in a transaction-based system, because it may lead to data inconsistency across nodes.
	
Shared Nothing architecture
	- there is no single point of contention between nodes. (SRP with microservices)

Eventually Consistency
	- Unlike relational database property of Strict consistency, eventual consistency property of a system ensures that any transaction will 
	eventually (not immediately) bring the database from one valid state to another. 
	This means there can be intermediate states that are not consistent between multiple nodes.
	
Parallel Computing vs Distributed Computing
	- PC is with shared memory. DC is with separete memory.
