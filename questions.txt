Authentication methods
	- Single factor auth (only by passwd, pin, etc)
	- 2nd factor auth: one time passwords, tokens generated by phone apart from the user/password. (80% of breaches can be prevented by 2FA)
	- Multi factor auth. Most complex. Leverages 2 or more independent factors to grant access
		- something you know (pin, pass, email, etc)
		- something you have (phone, token generator)
		- something you are: fingerprint, faceID
		- something you do: typing speed, location info.
	
OAuth2.0 / OpenID Connect (https://oauthdebugger.com/)
	- OAuth2.0 offers delegated authorization (i.e. login stackoverflow with your google account)
		- Roles:
			- Resource owner (the person trying to access stackoverflow.com)
			- Client application (stackoverflow.com), 
			- Auth Server (accounts.google.com), 
			- Resource Server (contacts.google.com), resources requeste by the client app.
			- Auth grant (where does the user have access), 
			- Redirect URI (stackoverflow.com/callbackAuth), 
			- Access Token. ()
		- Scopes (permisions)
			- email read, contacts read (and not delete, etc) - basically what the client is allowed to do.
		- Back channel (a request from my backend server to another backend server like accounts.google.com) - highly secure.
		- front channel (a request from the browser to the backend) - we cannot fully trust whats coming from the browser. (somebody may be looking over the shoulder).
			- we must trust what comes from the browser for as little time as possible.
			- the last request when we exchange the authorization code for the access token (), is happening on the back channel (secure).
		- When I develop my Oauth support with Google, I request from Goole a clientID and clientSecret.
		- Using OAuth2.0 for Authentication is bad. It was intended for Authorization (i.e. provide access to my google contacts for stackoverflow, not login SO with google)
		- OpenID Connect is built on top of Auth2.0 for Authentication. OID adds: ID token, User info, standard set scopes, standardized implementation. 
			OID connect is just a 5% thin layer on top of OAuth2.0 protocol.
			- the ID token returned by OIDC is called JWT (json web token). This jwt can be decoded to plaintext json using an online tool.

C4 Architecture Model with StarUML
	- System Context (Level 1): shows how the software system fits into the world around it.
	- Container (Level 2): Shows the high-level building blocks of the whole Software System (all microservices).
	- Component (Level 3): zooms into a single container, and presents the components inside it.
	- Code (Level 4): Presents the Code (UML/classes) inside a Component. Not necessarily all the classes, but at least the most important ones.


Questions for them:
	* Explain me your tech stack? tools used? IDEs? On-Prem/Cloud? Do you have a dedicated DevOps team? Who does the deployment?
	* How is the team organized? Who decides what work/direction we do/follow? Is there a roadmap/backlog for the Architecture team?
	* What will my tasks be during the first 1,3,6 months? How is the ramp-up period for Engineers and Architects?
	* What do you think would be the biggest challenge for this position? Is it the technical part? Is it the communication/persuading part?